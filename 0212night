#include<stdio.h>//输入一串数字，然后有空格打出
void print(int n)
{
	if (n > 9)
	{
		print(n/10);
	}
	printf("%d ", n%10);
}
int main()
{
	unsigned int num = 0;
	scanf("%d", &num);
	print(num);
	return 0;
}

#include<stdio.h>//计算字符串的长度
#include<string.h>
int my_strlen(char*str)
{
	int count = 0;
	while (*str != '\0')
	{
		count++;
		str++;
	}
	return count;
}
int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);
	printf("len = %d\n", len);
	return 0;
}

#include<stdio.h>//计算字符串的长度
#include<string.h>
int my_strlen(char*str)
{
	if (*str != '\0')
		return 1 + my_strlen(str + 1);
	else
	return 0;
}
int main()
{
	char arr[] = "bit";
	int len = my_strlen(arr);
	printf("len = %d\n", len);
	return 0;
}

#include<stdio.h>//求阶乘
//int Fac1(int n)
//{
//	int i = 0;
//	int ret = 1;
//	for (i = 1; i <= n; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}
int Fac2(int n)
{
	if (n <= 1)
		return 1;
	else
		return n*Fac2(n-1);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	/*ret = Fac1(n);*/
	ret = Fac2(n);
	printf("%d\n", ret);
	return 0;
}

#include<stdio.h>//斐波拉契数列
int Fib(int n)
{
	if (n<=2)
		return 1;
	else
		return Fib(n-1)+Fib(n-2);
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret = %d\n", ret);
	return 0;
}

#include<stdio.h>//斐波拉契数列简化
int Fib(int n)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (n > 2)
	{
		c = a + b;
		a = b;
		b = c;
		n--;
	}
	return c;
}
int main()
{
	int n = 0;
	int ret = 0;
	scanf("%d", &n);
	ret = Fib(n);
	printf("ret = %d\n", ret);
	return 0;
}

#include<stdio.h>
int main()
{
	char arr[] = "abcdef";
	int i = 0;
	for (i = 0; i < 6; i++)
	{
		printf("%c ", arr[i]);
	}
	return 0;
}
